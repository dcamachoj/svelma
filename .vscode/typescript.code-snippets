{
	// Place your svelma workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Export component": {
		"prefix": "export-component",
		"body": "export { default as $1 } from './$1.svelte';"
	},
	"Class Component": {
		"prefix": "class-component",
		"body": [
			"export type $1Options = BulmaClassOptions & {",
			"\t$0",
			"};",
			"",
			"export class $1Class extends BulmaClassComponent<$1Options> {",
			"\tconstructor() {",
			"\t\tsuper('$2', {});",
			"\t}",
			"}",
			"",
			"export const $3 = new $1Class();"
		]
	},
"Class Simple Component": {
		"prefix": "class-simple-component",
		"body": [
			"export class $1Class extends BulmaClassComponent<BulmaClassOptions> {",
			"\tconstructor() {",
			"\t\tsuper('$2', {});",
			"\t}",
			"}",
			"",
			"export const $3 = new $1Class();"
		]
	},
	"Svelma Component": {
		"prefix": "svelma-component",
		"body": [
			"<script lang=\"ts\">",
			"\timport type { BulmaOptions } from '\\$lib/utils/bulma.types.js';",
			"",
			"\texport let opts: BulmaOptions = {};",
			"",
			"\t$: cls = $1.cls({ opts });",
			"</script>",
			"",
			"<div class={cls}>",
			"\t<slot />",
			"</div>"
		]
	},
	"Export icon and text": {
		"prefix": "export-icon-text",
		"body": [
			"export let icon: string = '';",
			"export let text: string = '';"
		]
	},
	"Injectable": {
		"prefix": "static-injectable",
		"body": [
			"static readonly DI = Symbol.for('$1');",
			"static getInstance(): $1 {",
			"\treturn injectable.get($1.DI);",
			"}"
		]
	}
}